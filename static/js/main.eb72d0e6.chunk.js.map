{"version":3,"sources":["components/AddNewCategoryForm.js","components/TransactionForm.js","components/TransactionList.js","App.js","serviceWorker.js","index.js"],"names":["AddNewCategoryForm","props","handleChange","e","setState","target","name","value","bind","handleFormSubmit","state","category","localStorage","setItem","JSON","stringify","this","documentData","parse","getItem","className","onSubmit","type","onChange","Component","TransactionForm","returnStateObject","handleInputChange","handleSubmit","preventDefault","onAddOrEdit","key","Category","change","index","nativeEvent","selectedIndex","label","text","currentIndex","Name","Mobile","Address","list","prevProps","console","log","apple","push","autoComplete","placeholder","onClick","to","path","TransactionList","returnList","handleEdit","handleDelete","splice","data","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb72d0e6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass AddNewCategoryForm extends Component {\r\n\r\n  constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n\r\n        this.state = {\r\n            category: ''\r\n        }\r\n    }\r\n \r\nhandleChange= (e)=> {\r\n    this.setState({[e.target.name]:e.target.value});\r\n}\r\n\r\nhandleFormSubmit(e) {\r\n   localStorage.setItem('document',JSON.stringify(this.state));\r\n}\r\n \r\ncomponentDidMount() {\r\n    this.documentData = JSON.parse(localStorage.getItem('document'));\r\n \r\n    if (localStorage.getItem('document')) {\r\n        this.setState({\r\n            category: this.documentData.category,\r\n    })\r\n} else {\r\n    this.setState({\r\n        category: ''\r\n    })\r\n}\r\n}\r\n \r\nrender() {\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={this.handleFormSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>Category:</label>\r\n                    <input type=\"text\" name=\"category\" className=\"form-control\" value={this.state.category} onChange={this.handleChange} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">AddCategory</button>\r\n            </form>\r\n        </div>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default AddNewCategoryForm","import React, { Component } from 'react'\nimport AddNewCategoryForm from './AddNewCategoryForm'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nclass TransactionForm extends Component {\n\n    state = {\n        ...this.returnStateObject()\n    }\n\n    returnStateObject() {\n        if (this.props.currentIndex === -1)\n            return {\n                Name: '',\n                Mobile: '',\n                Address: ''\n            }\n        else\n            return this.props.list[this.props.currentIndex]\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentIndex !== this.props.currentIndex || prevProps.list !== this.props.list) {\n            this.setState({ ...this.returnStateObject() })\n            console.log(prevProps, this.props)\n        }\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.onAddOrEdit(this.state)\n    }\n\n    state = {\n        key:'',\n        Category:''\n    }\n\n     change = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let label = e.nativeEvent.target[index].text;\n        let key = e.target.value;\n        this.setState({ key: key, Category: label});\n    }\n\n    render() {\n          \n        const list=[];  \n        var apple = JSON.parse(localStorage.getItem('document'));\n        list.push(apple.category);\n\n        return (\n            <div>\n             <form onSubmit={this.handleSubmit} autoComplete=\"off\">\n                <input name=\"Name\" placeholder=\"Name\" onChange={this.handleInputChange} value={this.state.Name} /><br />\n                <input name=\"Mobile\" placeholder=\"Mobile\" onChange={this.handleInputChange} value={this.state.Mobile} /><br />\n                <input name=\"Address\" placeholder=\"Address\" onChange={this.handleInputChange} value={this.state.Address} /><br />\n                \n                <form>\n                 \n                  <select onChange={this.change} value={this.state.value}>\n                     <option value=\"0\">--Select--</option>\n                     <option value=\"1\">Engineer</option>\n                     <option value=\"2\">{list}</option>\n\n                 </select>\n                <input name=\"Category\" placeholder=\"Category\" onChange={this.handleInputChange} value={this.state.Category} /><br />\n\n                </form>\n\n                <button onClick={() => this.handleSubmit}>Submit</button>\n            </form>\n            \n                 <Router>\n                   <Link to=\"/AddNewCategory\" className=\"btn btn-primary\">CreateNewCategory</Link> <br />\n\n                   <Switch>\n                     <Route path=\"/AddNewCategory\">\n                       <AddNewCategoryForm />\n                     </Route>\n                   </Switch>\n\n                 </Router>\n\n          </div>\n        )\n    }\n}\n\nexport default TransactionForm\n","import React, { Component } from 'react'\nimport TransactionForm from './TransactionForm'\n\nclass TransactionList extends Component {\n    state = {\n        currentIndex: -1,\n        list: this.returnList()\n    }\n\n    returnList() {\n        if (localStorage.getItem('transactions') === null)\n            localStorage.setItem('transactions', JSON.stringify([]))\n        return JSON.parse(localStorage.getItem('transactions'))\n    }\n\n    handleEdit = (index) => {\n        this.setState({\n            currentIndex: index\n        })\n    }\n\n    handleDelete = (index) => {\n        var list = this.returnList()\n        list.splice(index, 1);\n        localStorage.setItem('transactions', JSON.stringify(list))\n        this.setState({ list, currentIndex: -1 })\n    }\n\n    onAddOrEdit = (data) => {\n        var list = this.returnList()\n        if (this.state.currentIndex === -1)\n            list.push(data)\n        else\n            list[this.state.currentIndex] = data\n        localStorage.setItem('transactions', JSON.stringify(list))\n        this.setState({ list, currentIndex: -1 })\n    }\n\n    render() {\n        return (\n            <div>\n                <TransactionForm\n                    currentIndex={this.state.currentIndex}\n                    list={this.state.list}\n                    onAddOrEdit={this.onAddOrEdit}\n                />\n                <hr/>\n\n            <table>\n                <thead>\n                   <tr>\n                    <td><h1>Name</h1></td>\n                    <td><h1>Mobile</h1></td>\n                    <td><h1>Address</h1></td>\n                    <td><h1>Category</h1></td>\n                    <td><h1>Operation</h1></td>\n                   </tr>\n                </thead>\n\n                    <tbody>\n                        {this.state.list.map((item, index) => {\n                            return <tr key={index}>\n\n                                <td>{item.Name}</td>\n                                <td>{item.Mobile}</td>\n                                <td>{item.Address}</td>\n                                <td>{item.Category}</td>\n\n                                <td>\n                                <button onClick={() => this.handleEdit(index)}>Edit</button>\n                                <button onClick={() => this.handleDelete(index)}>Delete</button>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default TransactionList\n\n","import React from 'react';\nimport './App.css';\nimport TransactionList from './components/TransactionList';\n\nfunction App() {\n  return (\n    <TransactionList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}